        // sync version

        // TODO choose most appropriate part :
        // async => file_part
        // sync  => file_part1

        /*
        let mut buffer = Vec::new();
        let path1 = Path::new(fname_ok);
        let mut file1 = File::open(path1).unwrap();
        let _file_content_length = file1.read_to_end(&mut buffer);
        let file_content = str::from_utf8(&*buffer).unwrap().to_string();
        let file_part1 = reqwest::multipart::Part::text(file_content)
            .file_name(path1.file_name().unwrap().to_string_lossy())
            .mime_str("application/octet-stream").unwrap();
         */

        // async version
        let _path_old = Path::new(fname_ok);
        let path_ok = Path::new(fname_ok1);
        let file = Tokio_File::open(path_ok).await?;
        let stream = FramedRead::new(file, BytesCodec::new());
        let _file_part = reqwest::multipart::Part::stream(Body::wrap_stream(stream))
            .file_name(path_ok.file_name().unwrap().to_string_lossy())
            .mime_str("application/octet-stream")?;

   let metadata_json = "{ \"file_owner\": \"bob smith\" }";
   let metadata_part = reqwest::multipart::Part::text(metadata_json);

   let read_stream : Stream<Item = std::io::Result<Vec<u8>> = my_file_stream;
   // Voir quelle m√©thode utiliser
   let stream_part = reqwest::multipart::Part::stream(read_stream);
   let stream_part = reqwest::multipart::Part::stream(Body::wrap_stream(read_stream));

   let multipart_form = reqwest::multipart::Form::new()
     .part("metadata", metadata_part)
     .part("file", stream_part);


Voir cette url : https://www.reddit.com/r/rust/comments/i4n9mp/how_to_upload_a_file_using_reqwest_but_streaming/


For uploading the file in one shot I am using FramedRead

let file = File::open(file_path).await?;
let stream = FramedRead::new(file, BytesCodec::new());
let body = Body::wrap_stream(stream);
client.request(method, url).headers(headers).body(body)

use tokio::fs::File;
use tokio::io::AsyncReadExt;

let mut file = File::open("foo.txt").await?;

let mut contents = vec![];
file.read_to_end(&mut contents).await?;

println!("len = {}", contents.len());
